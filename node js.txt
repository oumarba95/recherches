Nodes js n'est pas un framework,elle permet d'executer du javascript cote serveur.
Creer un serveur
----------------
let http = require('http');
let fs = require('fs');
let url = require('url');
let server = http.createServer();
server.on('request',(request,response) => {
 fs.readFile('index.html','utf8',(err,data) => {
  let query = url.parse(request.url,true).query;
  let name = query.name;
  if (err){
     response.writeHead(404);
     response.end("Ce fichier n'existe pas");
  }else{
      response.writeHead(200,{
      'Content-type':'text/html;charset=utf-8'
  });
   data = data.replace('{{ name }}',name);
   response.end(data);
  }
  });

});
server.listen(8080);
Evenements
----------
const Event = require('events');
let http = require('http');
/*let monEvenement = new Event ();
Event.on('saute',function(a,b){(once)
   console.log("J'ai saute",a,b);
});
Event.emit('saute',10,20)
Event.emit('saute');*/
let App = {
  start: function(port) {
    let EventOne = new Event();
       http.createServer((request,response){
       response.writeHead(200,{ 'Content-type':'text/html;charset=utf-8'});
       if(request.url ==='/'){
           EventOne.emit('root',response);
       }
       response.end();
    }).listen(port);
   return EventOne;
 }
}
let EventOne = App.start(8080);
EventOne.on('root',function(response){
   response.write('Bienvenue dans la page d'accueil');
});

Les streams
------------
devdocs.io
let fs = require('fs');
fs.readFile('demo.mp4',(err,data) =>{
     if (err) throw err
     fs.writeFile('copy.mp4',data,(err) => {
        if (err) throw err
        console.log('Le fichier a bien ete copie');
     });
});
createReadStream()
------------------
let file = 'video.mp3';
let fs = require('fs');
fs.stat(file,(err,stat) => {
    let totel = stat.size;
    let progress = 0;
    let read = fs.createReadStream(file);
    read.on('data',(chunk) => {
        progress+= chunk.lentgh;
        console.log("J'ai lu "+ Math.round(100*progress/total) + "%")
    });
    read.on('end',() => {
      console.log("J'ai fini de lire le fichier");
    });
 });

app.js
let Event = require('events');
let http = require('http');
let App = {
    start : function (port){
       let EventOne = new Event();
        http.createServer((request,response) => {
           response.writeHead(200,{
               'Content-type':'text/html ; charset=utf-8'
           });
           if(request.url === '/') {
              EventOne.emit('root',response);
           }
           response.end();
       }).listen(8080);
       return EventOne;
    }
}
module.exports = App;
require('./app');
Installer lodash(tableau)
npm i -S lodash
Express(framework node js)
npm i -S express

let app = require('express')();

app.get('/',(request,response)=>{
  response.send("Bienvenue dans la racine");
});
app.get('/login',(request,response)=>{
  response.send("Vous etes dans la page d'authentification.");
});
app.listen(8080)
livreOr
--------
ejs moteur de template

npm  i -S ejs    <%=  .. %>
sementic ui

let express = require('express');
let app = express();
//moteur de template
app.set('view engine','ejs');
//midlleware
app.use('/assets',express.static('public'));
//Routes
app.get('/',(request,response) => {
    response.render('pages/index',{test:'salut'});
});
app.listen(8080);
let bodyParser = require('body-parser')
npm i -S body-parser(gerer les formulaires)
app.use(bodyParser.urlencoded({ extended : false}));
app.use(bodyParser.json());
 npm i -S express-session
let session = require('express-session');
app.use(session({
   secret:'kjk',
   resave: false,
   saveUninitialized:true,
   cookie:{ secure:false}
}));

app.get('/',(request,response) => {
    if(request.session.error){
        response.locals.error = request.session.error;
        request.session.error = undefined;
    }
    response.render('pages/index');
});
app.post('/',(request,response) => {
    if(request.body.message === undefined || request.body.message === ''){
       request.session.error = 'Il y a une erreur';
       response.redirect('/');
    }
});
Middleware
----------
flash.js
module.exports = function(request,response,next){
    
        if(request.session.flash){
            response.locals.flash = request.session.flash;
            request.session.flash = undefined;
        }

        request.flash = function(type,content) {
            if(request.session.flash === undefined){
                request.session.flash = {};
            }
            request.session.flash[type] = content;
        }
        next();
}
utilisation 
request.flash('error','oii');
npm i -S mysql

db.js
let mysql = require('mysql');

let connection = mysql.createConnection({
   host:'localhost',
   user:'root',
   password:'',
   database:'tutorile'
});
connection.connect();

module.exports = connection;
message.js
let connection = require('../config/db');

class Message {

    static create(content,cb) {
        connection.query('insert into messages set  content = ?,created_at = ?',[content,new Date()],(err,result) => {
            if(err) throw err;
            cb(result);
        })
    }
    static all(cb) {
        connection.query('select * from messages',(err,rows) =>{
            if(err) throw err;
            cb(rows);
        })
    }
}


module.exports = Message;

npm i -S moment(gere le temps)
savoir quel mode
process.env.NODE_ENV = "production";

npm i -S sequelize@3.30.4
sequelize init
create model
sequelize model:create --attributes "email:string,username:string,password:string,bio:string
isAdmin:boolean" --name 
association
User(model)
models.User.hasMany(models.Message);
Message(migrations)
      user_id: {
        allowNull: false,
        type: Sequelize.INTEGER,
        references:{
          model:'Users',
          key:'id'
        }
      },

Messages model
/relations
    models.Message.belongsTo(models.User,{
      foreignKey:{
        allowNull:false
      }
    })
migration
sequilize db:migrate
WaterFull avec la librairie async

sequelize db:drop
sequelize db:create
sequelize db:migrate
la valeur de la relation
            include : [{
              model : models.User,
              attributes :['username']
            }]
NodeMailer
npm install nodemailer
var nodemailer = require('nodemailer');
var transporter = nodemailer.createTransport(
        service: 'gmail',
        auth: {
            user: 'sender@gmail.com',
            pass: 'password'
        }
);
var mailOptions = {
        from: req.body.sender,
        to: req.body.destination,
        subject: req.body.subject,
        text: req.body.message,
        html: '<b>' + req.body.message + '</b>'
};
transporter.sendMail(mailOptions, function(error, info){
     if(error){
        return console.log(error);
     }
     console.log('Message sent: ' + info.response);
});

transporter.close();
uploader un fichier
npm i formidable
var http = require('http');
var formidable = require('formidable');
var fs = require('fs');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      var oldpath = files.filetoupload.path;
      var newpath = 'C:/Users/Your Name/' + files.filetoupload.name;
      fs.rename(oldpath, newpath, function (err) {
        if (err) throw err;
        res.write('File uploaded and moved!');
        res.end();
      });
 });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080);

song.findAll({
 where :{
   $or :['',''].map(key => ({
      [key]:{
        $like :`%${search}%`
      }
})
 } 
}
)

















